@*example*@
@page "/"

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using BlazorApp.Data
@inject TestDataRetrieval DataRetrieval

<head>
 <style type ="text/css" >
   .footer{ 
       position: fixed;     
       text-align: left;    
       bottom: 0px; 
       width: 80%;
   }
   .piechart{
       position: fixed;
       bottom: 200;
       right: 800;
   }
   .barchart{
       position: fixed;
       margin-left: 0px;
       margin-top: 380px;
   }
   .table{
       position: fixed;
       margin-top:0px;
       margin-left: 600px;
       width: 625px; 
   }
   .td{
        padding-top: 12px;
        padding-bottom: 12px;
        word-wrap: none;
        word-break: keep-all;
   }
   
</style>
</head>
<h1>DashBoard Home</h1>
<body>
    <div class ="piechart"> <ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="350" Height="340"/> </div> 
@if (testdata == null){
    <p><em>Loading...</em></p>
}
else{
    <table class="table">
        <thead>
            <tr>
                <th>Test Run Id</th>
                <th>Test Case Id</th>
                <th>Test Name</th>
                <th>Test Created</th>
                <th>Test Status</th>
                <th>Image Path</th>
                <th>Created By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in testdata){
                @if(data.TestStatus == 1){
                    testResult = "passed";     
                }else{
                    testResult = "failed"; 
                }

                <tr>
                    <td>@data.TestRunId</td> 
                    <td>@data.TestCaseId</td>
                    <td>@data.TestName</td>
                    <td>@data.CreatedDate</td>
                    <td>@testResult</td>
                    <td>@data.ImagePath</td>
                    <td>@data.CreatedBy</td>
                </tr>   
            }
        </tbody>
    </table>
}
</body>

@code{
#region 
private TestData[] testdata;
private PieConfig _config;
private ChartJsPieChart _pieChartJs;
private PieDataset pieSet;
private BarConfig barconfig;
private ChartJsBarChart _barChartJs;
private BarDataset<BarData> barSet;
private string testResult; 
#endregion

protected override void OnInitialized(){

    #region 
    _config = new PieConfig{
        Options = new PieOptions{
            MaintainAspectRatio = false,
            
            Title = new OptionsTitle{
                Display = true,
                Text = "Last Assembly Results"
            },
            Responsive = true, 
             Animation = new ArcAnimation{
                AnimateRotate = true,
                AnimateScale = true
            } 
        }
    };
    _config.Data.Labels.AddRange(new[] { "Passed", "Failed"  });

    pieSet = new PieDataset{
        BackgroundColor = new[] {"#9dffb0", "#fb4d4f"},
        BorderWidth = 0,
        HoverBorderColor = "#323232",
        HoverBorderWidth = 1,
        BorderColor = "#ffffff",
    };
    #endregion

    #region 
    barconfig = new BarConfig{
        Options = new BarOptions{
            MaintainAspectRatio = false,
            Scales = new BarScales{

            },
            Title = new OptionsTitle{
                Display = true,
                Text = "Previous Assembly results"
            },
            Responsive = true, 
             Animation = new ArcAnimation{
                AnimateRotate = true,
                AnimateScale = true
            } 
        }
    };

    barSet = new BarDataset<BarData>{
        BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
        BorderWidth = 0,
        HoverBackgroundColor = ColorUtil.RandomColorString(),
        HoverBorderColor = ColorUtil.RandomColorString(),
        HoverBorderWidth = 1,
        BorderColor = "#ffffff",
    };
    #endregion
}
protected override async Task OnInitializedAsync(){
        testdata = await DataRetrieval.GetLastRunDataAsync(); 
        
        double numberPassed = 0; 
        foreach(var data in testdata){
            if(data.TestStatus == 1){
                numberPassed++;
            }
    }
    pieSet.Data.AddRange(new double[] { numberPassed, testdata.Length - numberPassed });
    _config.Data.Datasets.Add(pieSet);
    }
}