@*example*@
@page "/"

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using BlazorApp.Data
@using Microsoft.JSInterop
@inject TestDataRetrieval DataRetrieval
@inject IJSRuntime JSRuntime;
<html>
<head>
 <style type ="text/css" >
   .piechart{
       position: absolute;
   }
   .table{
       margin-top:0px;
       margin-left: 400px;
       width: 900px; 
   }
   .td{
        padding-top: 12px;
        padding-bottom: 12px;
        word-wrap: break-word;
        word-break: keep-all;
   }
   .entry{
       margin-left: 425px; 
   }
   .searchmethod{
       margin-left: 700px;
   }
   .dot{
    height: 20px;
    width: 20px;
    background-color: "@color";
    border-radius: 50%;
    display: inline-block;
   }
</style>
</head>
<h1>Test DashBoard Home </h1>

   <div class ="entry">
    <EditForm Model="@entry" OnValidSubmit = "ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <InputText id="entry" @bind-Value="entry.Text"/>

    <button class="searchb" @onclick="OnInitializedAsync">Search</button>
    <input type="radio" name="method" value="" @onclick="ByTestRunId">Test Run Id 
    <input type="radio" name="method" value="" @onclick = "ByTestCaseId">Test Case Id 
    <input type="radio" name="method" value="" @onclick = "ByTestDate">Test Date
    <input type="radio" name="method" value="" @onclick = "ByTestName">Test Name
    </EditForm>
   </div>
<body>
    <div class ="piechart"> <ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="350" Height="340"/> </div> 
@if (testdata == null){
    <p><em>Loading...</em></p>
}
else{
    <table class="table">
        <thead>
            <tr>
                <th> </th>
                <th>Test Run Id</th>
                <th>Test Case Id</th>
                <th>Test Name</th>
                <th>Test Created</th>
                <th>Test Status</th>
                <th>Image Path</th>
                <th>Created By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in testdata){
                @if(data.TestStatus == 1){
                    testResult = "passed";     
                }else{
                    testResult = "failed"; 
                }

                <tr>
                    <td><span class="dot" id="dot"></span></td>
                    <td>@data.TestRunId</td> 
                    <td>@data.TestCaseId</td>
                    <td>@data.TestName</td>
                    <td>@data.CreatedDate</td>
                    <td>@testResult</td>
                    <td>@data.ImagePath</td>
                    <td>@data.CreatedBy</td>
                </tr>   
            }
        </tbody>
    </table>
}
</body>
</html>

@code{ //*******************************

#region 
private TestData[] testdata;
private PieConfig _config;
private ChartJsPieChart _pieChartJs;
private PieDataset pieSet;
private string testResult; 
DataEntry entry = new DataEntry();
string color;  
#endregion

public void ValidSubmit(){
    Console.WriteLine(entry.Text + " is a valid submit");
}
protected override void OnInitialized(){ 
    _config = new PieConfig{
        Options = new PieOptions{
            MaintainAspectRatio = false, 
            Title = new OptionsTitle{
                Display = true,
                Text = "Test Case Results"
            },
            Responsive = true, 
             Animation = new ArcAnimation{
                AnimateRotate = true,
                AnimateScale = true
            } 
        }
    };
    _config.Data.Labels.AddRange(new[] { "Passed", "Failed"  });

    pieSet = new PieDataset{
        BackgroundColor = new[] {"#9dffb0", "#fb4d4f"},
        BorderWidth = 0,
        HoverBorderColor = "#323232",
        HoverBorderWidth = 1,
        BorderColor = "#ffffff",
    };
}
protected override async Task OnInitializedAsync(){
        if(entry.Text != null){
            try{
                if(!int.TryParse(entry.Text, out DataRetrieval.HomePageSearchId)){
                    DataRetrieval.HomePageSearchString = entry.Text; 
                }
            }catch(Exception){
                Console.WriteLine("Inproper Entry");
            }
        }
        Console.Write(DataRetrieval.searchMethod + " "); 
        testdata = await DataRetrieval.GetHomeRunDataAsync(); 
        
        double numberPassed = 0; 
        foreach(var data in testdata){
            if(data.TestStatus == 1){
                numberPassed++;
            }
    }
    if(pieSet.Data.Count > 0){
        pieSet.Data.Clear();
    }
    pieSet.Data.AddRange(new double[] { numberPassed, testdata.Length - numberPassed });
    _config.Data.Datasets.Add(pieSet);
    }

private void ByTestRunId(){
    DataRetrieval.searchMethod = 1;
}
private void ByTestCaseId(){
    DataRetrieval.searchMethod = 2;
}
private void ByTestDate(){
    DataRetrieval.searchMethod = 3;
}
private void ByTestName(){
    DataRetrieval.searchMethod = 4;
}
}