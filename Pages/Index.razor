@*example*@
@page "/"

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using BlazorApp.Data
@using Microsoft.JSInterop
@inject TestDataRetrieval DataRetrieval
@inject IJSRuntime JSRuntime;
<html>
<head>
 <style type ="text/css" >
   .piechart{
       position: absolute;
   }
   .table{
       margin-top:0px;
       margin-left: 400px;
       width: 900px; 
   }
   .td{
        padding-top: 12px;
        padding-bottom: 12px;
        word-wrap: break-word;
        word-break: keep-all;
   }
   .entry{
       margin-left: 425px; 
   }
   .searchmethod{
       margin-left: 700px;
   }
   .dot {
    height: 20px;
    width: 20px;
     background-color: #bbb;
     border-radius: 50%;
    display: inline-block;
}
</style>
</head>
<h1>Test DashBoard Home </h1>
   <div class ="entry">
    <EditForm Model="@entry" OnValidSubmit = "ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <InputText id="entry" @bind-Value="entry.Text"/>
 
    <button class="searchb" @onclick="OnInitializedAsync">Search</button>
    <input type="radio" name="method" value="" @onclick="ByTestRunId">Test Run Id 
    <input type="radio" name="method" value="" @onclick = "ByTestCaseId">Test Case Id 
    <input type="radio" name="method" value="" @onclick = "ByTestDate">Test Date
    <input type="radio" name="method" value="" @onclick = "ByTestName">Test Name
    </EditForm>
   </div>
<body>
    <div class ="piechart"> <ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="350" Height="340"/> </div> 
@if (testdata == null){
    <p><em>Loading...</em></p>
}
else{
    <table class="table">
        <thead>
            <tr>
                <th> </th>
                <th>Test Run Id</th>
                <th>Test Case Id</th>
                <th>Test Name</th>
                <th>Test Created</th>
                <th>Test Status</th>
                <th>Image Path</th>
                <th>Created By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in testdata){ //prints multiple rows of data onto the table
                @if(data.TestStatus == 1){ //if passed is true make it green and passed
                    testResult = "Passed";
                    <tr>
                    <td><span class="dot" style="background-color: #9dffb0;"></span></td>
                    <td>@data.TestRunId</td> 
                    <td>@data.TestCaseId</td>
                    <td>@data.TestName</td>
                    <td>@data.CreatedDate</td>
                    <td>@testResult</td>
                    <td>@data.ImagePath</td>
                    <td>@data.CreatedBy</td>
                </tr>
                }
                else if (data.TestStatus == 3 ){
                    testResult = "Interrupted";
                    <tr>
                    <td><span class="dot" style="background-color: #FFFF60;"></span></td>
                    <td>@data.TestRunId</td> 
                    <td>@data.TestCaseId</td>
                    <td>@data.TestName</td>
                    <td>@data.CreatedDate</td>
                    <td>@testResult</td>
                    <td>@data.ImagePath</td>
                    <td>@data.CreatedBy</td>
                    </tr>
                }        
                else{ //else make it red and fail
                    testResult = "Failed";
                    <tr>
                    <td><span class="dot" style="background-color: #fb4d4f;"></span></td>
                    <td>@data.TestRunId</td> 
                    <td>@data.TestCaseId</td>
                    <td>@data.TestName</td>
                    <td>@data.CreatedDate</td>
                    <td>@testResult</td>
                    <td>@data.ImagePath</td>
                    <td>@data.CreatedBy</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    @if(testdata.Length < 1){
        <p style="margin-left: 400px; margin-bottom: 300px;"><strong>No results match your search criteria.. @DataRetrieval.RetrievalErrorMsg</strong></p><br>
        DataRetrieval.RetrievalErrorMsg = "";
    }
}
</body>
</html>

@code{
    //*******************************

    #region 
    private TestData[] testdata;
    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;
    private PieDataset pieSet;
    private string testResult;
    DataEntry entry = new DataEntry();
    #endregion

    public void ValidSubmit()
    {
        Console.WriteLine(entry.Text + " is a valid submit");
    }
    protected override void OnInitialized()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                MaintainAspectRatio = false,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Test Case Results"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };
        _config.Data.Labels.AddRange(new[] { "Passed", "Failed", "Interrupted" });

        pieSet = new PieDataset
        {
            BackgroundColor = new[] { "#9dffb0", "#fb4d4f", "#FFFF60" },
            BorderWidth = 0,
            HoverBorderColor = "#323232",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };
    }
    protected override async Task OnInitializedAsync()
    {
        if (entry.Text != null)
        {
            try
            {
                if (!int.TryParse(entry.Text, out DataRetrieval.HomePageSearchId))
                {
                    DataRetrieval.HomePageSearchString = entry.Text.Trim();
                }
            }
            catch (Exception)
            {
                DataRetrieval.RetrievalErrorMsg = "Inproper Entry";
            }
        }
        testdata = await DataRetrieval.GetHomeRunDataAsync();

        double numberPassed = 0;
        double numberInterrupted = 0;
        foreach (var data in testdata)
        {
            if (data.TestStatus == 1)
            {
                numberPassed++;
            }
            if (data.TestStatus == 3)
            {
                numberInterrupted++;
            }
        }
        if (pieSet.Data.Count > 0)
        {
            pieSet.Data.Clear();
        }
        pieSet.Data.AddRange(new double[] { numberPassed, testdata.Length - numberPassed - numberInterrupted, numberInterrupted });
        _config.Data.Datasets.Add(pieSet);
    }

    private void ByTestRunId()
    {
        DataRetrieval.searchMethod = 1;
    }
    private void ByTestCaseId()
    {
        DataRetrieval.searchMethod = 2;
    }
    private void ByTestDate()
    {
        DataRetrieval.searchMethod = 3;
    }
    private void ByTestName()
    {
        DataRetrieval.searchMethod = 4;
    }
}