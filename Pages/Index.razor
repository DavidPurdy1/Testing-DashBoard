@*example*@
@page "/"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util

@using BlazorApp.Data
@inject TestDataRetrieval DataRetrieval

<head>
 <style type ="text/css" >
   .footer{ 
       position: fixed;     
       text-align: left;    
       bottom: 0px; 
       width: 80%;
   }
   .chart{ /*I don't know how to format anything !!!*/
       position: fixed;
       bottom: 200;
       right: 800;
   }
   .table{
       position: fixed;
       right: 300;
       bottom: 400;
   }
   
</style>
</head>
<h1>Hello, welcome to the testing dashboard</h1>
<body>
    <div class ="chart"> <ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="200" Height="200"/> </div> 

@if (testdata == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Last Assembly</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in testdata)
            {
                <tr>
                    <td>@data.TestId</td>
                </tr>
                    <tr>
                    <td>@data.Tester</td>
                </tr>
                <tr>
                    <td>@data.TestStatus</td>
                </tr>
                <tr>
                    <td>@data.ImageLocation</td>
                </tr>
            }
        </tbody>
    </table>
}
    <div class="footer"><SurveyPrompt Title="How is Blazor working for you?" /></div>
</body>

@code{
private TestData[] testdata;
private PieConfig _config;
private ChartJsPieChart _pieChartJs;
protected override void OnInitialized() //Pie chart
{
    _config = new PieConfig
    {
        Options = new PieOptions
        {
            MaintainAspectRatio = false,
            
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Last Assembly Results"
            },
            Responsive = true, 
             Animation = new ArcAnimation
            {
                AnimateRotate = true,
                AnimateScale = true
            } 
        }
    };

    _config.Data.Labels.AddRange(new[] { "Passed", "Failed"  });

    var pieSet = new PieDataset
    {
        BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
        BorderWidth = 0,
        HoverBackgroundColor = ColorUtil.RandomColorString(),
        HoverBorderColor = ColorUtil.RandomColorString(),
        HoverBorderWidth = 1,
        BorderColor = "#ffffff",
    };
    //This is where you put in the data
    pieSet.Data.AddRange(new double[] { 4, 5 });
    _config.Data.Datasets.Add(pieSet);
}
protected override async Task OnInitializedAsync()
    {
        testdata = await DataRetrieval.GetLastDataAsync(); 
    }
}