@page "/launcher"
@using System.Configuration
@using BlazorApp.Services;
@using System; 

<head>
 <style type ="text/css" >
   .footer{ 
       position: static;     
       left: 250px;    
       bottom: 150px; 
       width: 100%;
   }  
   .search{
       padding: 15px;
   }
   .table{
       text-align: center;
       padding: 10px;
   }
</style>
</head>
<body>
<h1>Launch Tests Here</h1>

<p>@Progress</p>

<table class="table">
    <tr>
    <th><button class="search" disabled=@IsTaskRunning @onclick="ButtonAction1">Basic Test Scenario</button></th>
    <th><button class="search" disabled=@IsTaskRunning @onclick="ButtonAction2">Advanced Test Scenario</button></th>
    <th><button class="search" disabled=@IsTaskRunning @onclick="ButtonAction3">Full Test Scenario</button></th>
    <th><button class="search" disabled=@IsTaskRunning @onclick="ButtonAction4">Four Part Test Scenario</button></th>
    <th><button class="search" disabled=@IsTaskRunning @onclick="ButtonAction5">Regression Test Scenario</button> </th>
    </tr>
</table>


<div class="footer">
    <p>Run Tests By Test Case Name</p>
    <EditForm Model="@entry">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <InputText id="entry" @bind-Value="entry.Text"/>
    <button class="searchb" @onclick="SearchButtonAction">Run</button>
    </EditForm>

    @*
    <p>Run at a certain time</p>
    <EditForm Model="@entry" OnValidSubmit = "ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <InputText id="entry" @bind-Value="entry.Time"/>
    <button class="searchb" @onclick="SetTimer">Run</button>
    </EditForm>
    *@
 </div> 
</body>

@code{
    #region fields
    private DataEntry entry = new DataEntry();
    public bool IsTaskRunning = false;
    public string Progress { get; set; } = "";
    #endregion

    public async void WaitForResults(string tests)
    {
        IsTaskRunning = true;
        Progress = "Running Tests ...";
        await TestLauncher.RunProcessAsync(tests);
        Progress = "";
        IsTaskRunning = false;
        try
        {
            StateHasChanged();
        }
        catch (InvalidOperationException e)
        {
            Console.WriteLine(e.StackTrace);
        }
    }

    /** Timer and scheduling
    public void SetTimer()
    {
        Timer t = new Timer(new TimerCallback(TimerAction));
        t.Change(int.Parse(entry.Time), 0);
    }
    private void TimerAction(object state)
    {
        // The state object is the Timer object.
        Timer t = (Timer)state;
        t.Dispose();
        WaitForResults(entry.Text, 25000);
    }
    **/

    #region button actions
    public void ButtonAction1()
    {
        WaitForResults(ConfigurationManager.AppSettings.Get("Basic Test"));
    }
    public void ButtonAction2()
    {
        WaitForResults(ConfigurationManager.AppSettings.Get("Advanced Test"));
    }
    public void ButtonAction3()
    {
        WaitForResults(ConfigurationManager.AppSettings.Get("Full Test"));
    }
    public void ButtonAction4()
    {
        WaitForResults(ConfigurationManager.AppSettings.Get("Four Part Test"));
    }
    public void ButtonAction5()
    {
        WaitForResults(ConfigurationManager.AppSettings.Get("Regression Test"));
    }
    public void SearchButtonAction()
    {
        WaitForResults(entry.Text);
    }
    #endregion

}